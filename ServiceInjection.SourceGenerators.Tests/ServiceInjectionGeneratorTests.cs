using System.Collections.Immutable;
using System.Text.RegularExpressions;
using CodeIX.ServiceInjection.SourceGenerators;

using Microsoft.CodeAnalysis;

using NSubstitute;

namespace ServiceInjection.SourceGenerators.Tests;

[TestClass]
public class ServiceInjectionGeneratorTests
{
    [TestInitialize]
    public void Init()
    {
        // Initialization code before test method is executed
    }

    [TestMethod]
    public void TestMyMethod()
    {
        // Arrange
        // create a INamedTypeSymbol with Namespace and Name
        var symbol = Substitute.For<INamedTypeSymbol>();
        var namespaceSymbol = Substitute.For<INamespaceSymbol>();
        namespaceSymbol.ToDisplayString().Returns("MyNamespace");
        symbol.ContainingNamespace.Returns(namespaceSymbol);
        symbol.Constructors.Returns(new List<IMethodSymbol>().ToImmutableArray());
        symbol.Name.Returns("MyName");

        var typeSymbol = Substitute.For<ITypeSymbol>();

        var injections = new List<Injection>
        {
            new()
            {
                Name = "MyDependentName",
                Required = true,
                Type = typeSymbol
            }
        };

        // Act
        var sourceCode = ServiceInjectionGenerator.GenerateSourceCode(symbol, injections);

        // Assert
        Assert.IsNotNull(sourceCode);

        // regex replace the date with DATE
        sourceCode = Regex.Replace(sourceCode, @"date=""[^""]+""", @"date=""DATE""");

        var expected = @"// <auto-generated date=""DATE"">
// This code was generated by ServiceInjection.
// Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated.
// </auto-generated>

namespace MyNamespace
{
    partial class MyName
    {
        public MyName( MyDependentName)
        {
            this.MyDependentName = MyDependentName ?? throw new ArgumentNullException(nameof(MyDependentName));
        }
    }
}
";
        Assert.AreEqual(expected, sourceCode);
    }

    [TestCleanup]
    public void Cleanup()
    {
        // Cleanup code after test method did execute
    }
}