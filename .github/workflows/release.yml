name: NuGet

on:
  release:
    types: [published]

jobs:
  Build:
    env:
      BUILD_CONFIG: 'Release'
      SOLUTION: 'ServiceInjection.sln'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
  
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Restore dependencies
        run: dotnet restore $SOLUTION

      - name: Build
        run: dotnet build $SOLUTION --configuration Release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nuget-package
          path: ./ServiceInjection.SourceGenerators/bin/Release/*.nupkg

      - name: Run tests
        run: dotnet test --configuration $BUILD_CONFIG --no-restore --no-build --verbosity normal

  Publish:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Download NuGet Package
        uses: actions/download-artifact@v3
        with:
          name: nuget-package
          path: ./nupkgs 

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Publish NuGet Package
        run: dotnet nuget push ./nupkgs/*.nupkg --source 'https://api.nuget.org/v3/index.json' --api-key ${{ secrets.NUGET_API_KEY }}

  Update-Release:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Download NuGet Package Artifact
        uses: actions/download-artifact@v3
        with:
          name: nuget-package
          path: ./nupkgs
  
      - name: Get NuGet Package Name
        id: get_package_name
        run: echo "NUPKG_NAME=$(basename $(ls ./nupkgs/*.nupkg))" >> $GITHUB_ENV
  
      - name: Get Release Information and Update Release
        id: get_release_info
        run: |
          $tagName = "${{ github.ref }}".Replace("refs/tags/", "")
          $headers = @{
            "Authorization" = "token ${{ secrets.GITHUB_TOKEN }}"
            "Accept" = "application/vnd.github.v3+json"
          }
          $releaseUrl = "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tagName"
          $releaseInfo = Invoke-RestMethod -Uri $releaseUrl -Method Get -Headers $headers
          $uploadUrl = $releaseInfo.upload_url
          echo "UPLOAD_URL=$uploadUrl" | Out-File -Append -FilePath $env:GITHUB_ENV
       
          # Update Release
          $releaseData = @{
            "tag_name" = $tagName
            "name" = "Release $tagName"
            "draft" = $false
            "prerelease" = $false
          }
          Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/$($releaseInfo.id)" -Method Patch -Headers $headers -Body ($releaseData | ConvertTo-Json)
        shell: pwsh
      
      - name: Upload NuGet Package as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./nupkgs/${{ env.NUPKG_NAME }}
          asset_name: ${{ env.NUPKG_NAME }}
          asset_content_type: application/octet-stream